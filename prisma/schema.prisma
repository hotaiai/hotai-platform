// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  passwordHash  String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  chats         Chat[]
  messages      Message[]
  prompts       Prompt[]
  usageRecords  Usage[]
  workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId   String?
}

// OAuth accounts
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session management
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Projects for organizing chats
model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String    @default("#3B82F6") // Blue-500
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats       Chat[]
}

// Chat conversations
model Chat {
  id          String    @id @default(cuid())
  title       String
  userId      String
  projectId   String?   // Optional project association
  model       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages    Message[]
  
  @@index([projectId])
}

// Chat messages
model Message {
  id          String    @id @default(cuid())
  chatId      String
  userId      String
  role        String    // 'user' | 'assistant' | 'system'
  content     String
  images      String[]  @default([]) // Array of image URLs
  model       String?
  tokens      Int?
  createdAt   DateTime  @default(now())

  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])
}

// Prompt templates
model Prompt {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     String
  category    String
  isPublic    Boolean   @default(false)
  userId      String
  likes       Int       @default(0)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  variables   PromptVariable[]
}

// Prompt variables
model PromptVariable {
  id          String    @id @default(cuid())
  promptId    String
  name        String
  description String?
  defaultValue String?

  prompt      Prompt    @relation(fields: [promptId], references: [id], onDelete: Cascade)
}

// Usage tracking
model Usage {
  id          String    @id @default(cuid())
  userId      String
  model       String
  promptTokens Int
  completionTokens Int
  totalTokens Int
  cost        Float
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
}

// Workspace for team collaboration
model Workspace {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  ownerId     String
  plan        Plan      @default(FREE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  members     User[]
  invites     WorkspaceInvite[]
}

// Workspace invitations
model WorkspaceInvite {
  id          String    @id @default(cuid())
  email       String
  workspaceId String
  role        Role      @default(USER)
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  ADMIN
  OWNER
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}